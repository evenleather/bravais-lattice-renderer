<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Basic 3D Renderer</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            font-family: 'Inter', sans-serif;
            background-color: #1a1a1a;
            color: #ffffff;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        canvas {
            display: block;
            touch-action: none; /* Prevent default touch behavior */
            width: 100%;
            height: 100%;
        }

        .info-panel {
            position: absolute;
            bottom: 20px;
            left: 20px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.7);
            border-radius: 10px;
            backdrop-filter: blur(5px);
            max-width: 300px;
            font-size: 14px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body>

    <div class="info-panel">
        <p style="margin: 0;">**Controls**</p>
        <ul style="list-style-type: none; padding: 0; margin: 5px 0 0 0;">
            <li><span style="font-weight: bold;">Rotate:</span> Click and drag</li>
            <li><span style="font-weight: bold;">Pan:</span> Hold Shift and click/drag</li>
            <li><span style="font-weight: bold;">Zoom:</span> Scroll wheel</li>
        </ul>
        <p style="margin: 10px 0 0 0; font-style: italic;">Powered by Three.js</p>
    </div>

    <!-- The script tag for Three.js must be loaded first -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script>
        // Use window.onload to ensure the entire page and its resources are loaded before running the script
        window.onload = function() {

            // --- Scene Setup ---
            const scene = new THREE.Scene();
            scene.background = new THREE.Color(0x1a1a1a); // Dark background

            // --- Camera Setup ---
            // PerspectiveCamera(fov, aspect, near, far)
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5; // Set the initial camera position

            // --- Renderer Setup ---
            const renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setPixelRatio(window.devicePixelRatio);
            document.body.appendChild(renderer.domElement);

            // --- Lighting ---
            // Add an ambient light to illuminate all objects equally
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);

            // Add a point light to cast shadows and provide a directional feel
            const pointLight = new THREE.PointLight(0xffffff, 1);
            pointLight.position.set(10, 10, 10);
            scene.add(pointLight);

            // --- Create a Test Object (a Cube) ---
            const geometry = new THREE.BoxGeometry();
            const material = new THREE.MeshPhongMaterial({ color: 0x007bff, emissive: 0x002244 });
            const cube = new THREE.Mesh(geometry, material);
            scene.add(cube);

            // --- Interaction (Mouse & Touch) ---
            let isDragging = false;
            let isPanning = false;
            let previousMousePosition = { x: 0, y: 0 };
            const rotationSpeed = 0.005;
            const panSpeed = 0.01;

            // Mouse down event
            renderer.domElement.addEventListener('mousedown', (event) => {
                isDragging = true;
                isPanning = event.shiftKey; // Check if the Shift key is held down
                previousMousePosition.x = event.clientX;
                previousMousePosition.y = event.clientY;
            });

            // Mouse up event
            renderer.domElement.addEventListener('mouseup', () => {
                isDragging = false;
                isPanning = false;
            });

            // Mouse move event for rotation and panning
            renderer.domElement.addEventListener('mousemove', (event) => {
                if (isDragging) {
                    const deltaMove = {
                        x: event.clientX - previousMousePosition.x,
                        y: event.clientY - previousMousePosition.y,
                    };

                    if (isPanning) {
                        // Pan the camera
                        const vector = new THREE.Vector3(-deltaMove.x * panSpeed, deltaMove.y * panSpeed, 0);
                        camera.position.add(vector);
                    } else {
                        // Rotate the scene
                        const rotationY = deltaMove.x * rotationSpeed;
                        const rotationX = deltaMove.y * rotationSpeed;
                        scene.rotation.y += rotationY;
                        scene.rotation.x += rotationX;
                    }

                    previousMousePosition.x = event.clientX;
                    previousMousePosition.y = event.clientY;
                }
            });

            // Mouse wheel event for zooming
            renderer.domElement.addEventListener('wheel', (event) => {
                const zoomSpeed = 0.1;
                camera.position.z += event.deltaY * zoomSpeed;
                camera.position.z = Math.max(1, Math.min(100, camera.position.z));
            });
            
            // --- Touch Interaction ---
            renderer.domElement.addEventListener('touchstart', (event) => {
                if (event.touches.length === 1) {
                    isDragging = true;
                    isPanning = false; // Simple touch is for rotation
                    previousMousePosition.x = event.touches[0].clientX;
                    previousMousePosition.y = event.touches[0].clientY;
                } else if (event.touches.length === 2) {
                    isPanning = true;
                    // You would calculate the initial distance for zooming
                    // ... this is a more advanced topic for later.
                }
            });

            renderer.domElement.addEventListener('touchend', () => {
                isDragging = false;
                isPanning = false;
            });

            renderer.domElement.addEventListener('touchmove', (event) => {
                if (isDragging && event.touches.length === 1) {
                    const deltaMove = {
                        x: event.touches[0].clientX - previousMousePosition.x,
                        y: event.touches[0].clientY - previousMousePosition.y,
                    };

                    const rotationY = deltaMove.x * rotationSpeed;
                    const rotationX = deltaMove.y * rotationSpeed;
                    scene.rotation.y += rotationY;
                    scene.rotation.x += rotationX;

                    previousMousePosition.x = event.touches[0].clientX;
                    previousMousePosition.y = event.touches[0].clientY;
                }
            });

            // --- Responsiveness ---
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });

            // --- Animation Loop ---
            function animate() {
                requestAnimationFrame(animate);
                renderer.render(scene, camera);
            }

            // Start the animation loop
            animate();
        };
    </script>
</body>
</html>
